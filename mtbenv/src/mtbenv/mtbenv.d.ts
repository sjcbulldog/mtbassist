import { MTBLoadFlags } from './loadflags';
import { MTBManifestDB } from '../manifest/mtbmanifestdb';
import { PackDB } from '../packdb/packdb';
import { ToolsDB } from '../toolsdb/toolsdb';
import { MTBAppInfo } from '../appdata/mtbappinfo';
import { MTBCommand } from './mtbcmd';
import winston from 'winston';
export declare class ModusToolboxEnvironment {
    private static env_?;
    static mtbDefaultManifest: string;
    private isLoading;
    private appdir_?;
    private wants_;
    private has_;
    private loading_;
    private manifest_db_;
    private tools_db_;
    private pack_db_;
    private app_info_?;
    private requested_tools_dir_?;
    private exe_dir_?;
    private tools_dir_?;
    private logger_;
    static getInstance(logger: winston.Logger, exedir?: string): ModusToolboxEnvironment | null;
    private constructor();
    destroy(): void;
    get manifestDB(): MTBManifestDB;
    get toolsDB(): ToolsDB;
    get packDB(): PackDB;
    get appInfo(): MTBAppInfo | undefined;
    setRequestedToolsDir(dir: string): void;
    toolsDir(): string | undefined;
    load(flags: MTBLoadFlags, appdir?: string): Promise<void>;
    private checkLoadFlag;
    private wants;
    has(flags: MTBLoadFlags): boolean;
    loading(flags: MTBLoadFlags): boolean;
    executeCommand(cmd: MTBCommand): Promise<number>;
    executeCommands(cmds: MTBCommand[]): Promise<number[]>;
    generateSource(pass: string): MTBCommand[];
    private runCodeGenerator;
    private runSpecificCodeGenerator;
    private nextStep;
    private loadAppInfo;
    private loadPacks;
    private loadTools;
    private searchToolsDir;
    private searchCommonDir;
    private cyToolsPathDir;
    private setupToolsDir;
    private loadManifest;
    private loadDeviceDB;
}
//# sourceMappingURL=mtbenv.d.ts.map